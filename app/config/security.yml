security:
    providers:
        acme_user_provider:
            # class: Acme\Bundle\UserBundle\Security\User\WebserviceUserProvider
            id: acme.user_provider.name
            # id: app.webservice_user_provider
    encoders:
        # Acme\Bundle\UserBundle\Security\User\WebserviceUser: plaintext
        Acme\Component\User\Model\UserInterface: sha512
        # Acme\Component\User\Model\UserInterface: plaintext
        # Acme\Component\User\Model\User: sha512
    firewalls:
        main:
            context: user
            pattern: /.*
            form_login:
                provider: acme_user_provider
                login_path: /user/login
                check_path: /user/login
                failure_path: /user/login
                default_target_path: /
            logout: 
                path: /user/logout
            anonymous: true
    access_control:
        - { path: ^/sys/access, roles: IS_AUTHENTICATED_FULLY }


# security:
#     # encoders:
#         # Our user class and the algorithm we'll use to encode passwords
#         # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
#         # AppBundle\Entity\User: bcrypt

#     # providers:
#         # in this example, users are stored via Doctrine in the database
#         # To see the users at src/AppBundle/DataFixtures/ORM/LoadFixtures.php
#         # To load users from somewhere else: http://symfony.com/doc/current/cookbook/security/custom_provider.html
#         # database_users:
#             # entity: { class: AppBundle:User, property: username }

#     # http://symfony.com/doc/current/book/security.html#firewalls-authentication
#     firewalls:
#         secured_area:
#             # this firewall applies to all URLs
#             pattern: ^/

#             # but the firewall does not require login on every page
#             # denying access is done in access_control or in your controllers
#             anonymous: true

#             # This allows the user to login by submitting a username and password
#             # Reference: http://symfony.com/doc/current/cookbook/security/form_login_setup.html
#             form_login:
#                 # The route name that the login form submits to
#                 # check_path: security_login_check
#                 check_path: mysys_login_check
#                 # The name of the route where the login form lives
#                 # When the user tries to access a protected page, they are redirected here
#                 # login_path: security_login_form
#                 login_path: mysys_login_form
#                 # Secure the login form against CSRF
#                 # Reference: http://symfony.com/doc/current/cookbook/security/csrf_in_login_form.html
#                 csrf_token_generator: security.csrf.token_manager

#             logout:
#                 # The route name the user can go to in order to logout
#                 # path: security_logout
#                 path: mysys_logout
#                 # The name of the route to redirect to after logging out
#                 target: homepage

#     access_control:
#         # this is a catch-all for the admin area
#         # additional security lives in the controllers
#         - { path: ^/admin, roles: ROLE_ADMIN }
#         - { path: ^/sys/access, roles: IS_AUTHENTICATED_FULLY }


# security:
#     providers:
#         in_memory:
#             memory:
#                 users:
#                     ryan:
#                         password: ryanpass
#                         roles: 'ROLE_USER'
#                     admin:
#                         password: kitten
#                         roles: 'ROLE_ADMIN'
#     encoders:
#         Symfony\Component\Security\Core\User\User: plaintext

#     firewalls:
#         # ...
#         default:
#             anonymous: ~
#             http_basic: ~
#     access_control:
#         # require ROLE_ADMIN for /admin*
#         - { path: ^/admin, roles: ROLE_ADMIN }


